# Luke's lf settings


# Note on Image Previews
# For those wanting image previews, like this system, there are four steps to
# set it up. These are done automatically for LARBS users, but I will state
# them here for others doing it manually.
#
# 1. ueberzug must be installed.
# 2. The scope file (~/.config/lf/scope for me), must have a command similar to
#    mine to generate ueberzug images.
# 3. A `set cleaner` line as below is a cleaner script.
# 4. lf should be started through a wrapper script (~/.local/bin/lfub for me)
#    that creates the environment for ueberzug. This command can be be aliased
#    in your shellrc (`alias lf="lfub") or if set to a binding, should be
#    called directly instead of normal lf.

# Basic vars
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons true
set period 1
set drawbox on
set info "size"
set ratio '1:2:3'
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/scope'

# cmds/functions



cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
	application/vnd.openxmlformats-officedocument.wordprocessingml.document) libreoffice $f ;;
	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) localc $fx ;;
	image/vnd.djvu|application/pdf|application/octet-stream|application/postscript) setsid -f mupdf $fx >/dev/null 2>&1 ;;
        text/*|application/json|inode/x-empty) nvim $fx;;
	image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
	image/svg+xml) display -- $f ;;
	image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" |
		setsid -f sxiv -aio 2>/dev/null | while read -r file; do
			[ -z "$file" ] && continue
			lf -remote "send select \"$file\""
			lf -remote "send toggle"
		done &
		;;
	audio/*) mpv --audio-display=no $f ;;
	video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
	application/pdf|application/vnd*|application/epub*) setsid -f mupdf $fx >/dev/null 2>&1 ;;
	application/pgp-encrypted) $EDITOR $fx ;;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

cmd chmod ${{
	printf "chmod Mode :"
	read ans
	for file in $fx
	do
		sudo chmod $ans $file
	done
}}

cmd extract ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "extract?[y/N]"
	read ans
	[ $ans = "y" ] && aunpack $fx
}}

cmd zip %zip -r "$fx" "$fx"
#cmd tar %tar cvf "$f.tar" "$f"
cmd tar %tar cvf "$f.tar" -C "$f" .
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf -- $fx
}}

cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval mv -iv \"$x\" \"$dest\"
	done &&
	notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

cmd setbg "$1"
cmd bulkrename $vidir
#test
cmd unmount ${{
  sudo umount "$f" && notify-send "Unmounted" "Ok"
  lf -remote "send $id reload"
  sudo rm -rf $f
}}

cmd bulk-rename ${{
	index=$(mktemp /tmp/lf-bulk-rename-index.XXXXXXXXXX)
	if [ -n "${fs}" ]; then
		echo "$fs" > $index
	else
		echo "$(ls "$(dirname $f)" | tr ' ' "\n")" > $index
	fi
	index_edit=$(mktemp /tmp/lf-bulk-rename.XXXXXXXXXX)
	cat $index > $index_edit
	$EDITOR $index_edit
	if [ $(cat $index | wc -l) -eq $(cat $index_edit | wc -l) ]; then
		max=$(($(cat $index | wc -l)+1))
		counter=1
		while [ $counter -le $max ]; do
			a="$(cat $index | sed "${counter}q;d")"
			b="$(cat $index_edit | sed "${counter}q;d")"
			counter=$(($counter+1))

			[ "$a" = "$b" ] && continue
			[ -e "$b" ] && echo "File exists: $b" && continue
			mv "$a" "$b"
		done
	else
		echo "Number of lines must stay the same"
	fi
	rm $index $index_edit
}}

#cmd stripspace %mv "$f" `echo "$f" | sed -e 's/ /_/g'`

cmd stripspace ${{
for dr in $fx; do
	mv "$dr" `echo "$dr" | sed -e 's/ /_/g'`
done

}}
cmd dragon %dragon-drag-and-drop $fx
# Bindings

map u dragon
map <c-f> $lf -remote "send $id select '$(fzf)'"
map gh cd /home/bsdara
map gg top
map D delete
map E extract
map C copyto
map M moveto
map <c-n> push :mkdir<space>
map <c-r> reload
map <c-s> set hidden!
map <enter> shell
map x $$f
map X !$f
map o &mimeopen $f
map O $mimeopen --ask $f
map gt cd /mnt/vol0

map br $vimv $fx
map A rename # at the very end
map c push A<c-u> # new rename
map I push A<c-a> # at the very beginning
map i push A<a-b><a-b><a-f> # before extention
map a push A<a-b> # after extention
map B bulk-rename
map b $setbg $f

map <c-g> push $gimp<space>$f<enter>
map <c-e> push $nvim<space>$f<enter>
map V push :!nvim<space>

map W $setsid -f kitty >/dev/null 2>&1

map Y $printf "%s" "$fx" | xclip
map zz zip
map zt tar
map zg targz
map zb tarbz2
#removing some default mapping
map h
map l
#test
map J unmount
map oo /usr/bin/chmod
map sp stripspace
map ht cd ~/.cache/t2t/
map hV cd /run/media/bsdara/e64b4e3a-bf2c-4c0b-a935-1300218ada39
map hb cd ~/.local/bin/bin
map hv cd ~/Videos
map hd cd ~/Downloads/
map ha cd ~/
map hc cd ~/.config/
# Source Bookmarks
source "~/.config/lf/shortcutrc"
map f $nvim $(fzf)

cmd fzf_jump ${{
    res="$(find . -maxdepth 2 | fzf --reverse --header='Jump to location')"
    if [ -n "$res" ]; then
        if [ -d "$res" ]; then
            cmd="cd"
        else
            cmd="select"
        fi
        res="$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')"
        lf -remote "send $id $cmd \"$res\""
    fi
}}
map <c-f> :fzf_jump

cmd fzf_search ${{
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case"
    res="$(
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1 | sed 's/\\/\\\\/g;s/"/\\"/g'
    )"
    [ -n "$res" ] && lf -remote "send $id select \"$res\""
}}
#Edit and reload config file
cmd edit-nvim ${{
    $EDITOR ~/.config/nvim/init.vim
    lf -remote "send $id source ~/.config/nvim/init.vim"
}}



cmd edit-zshrc ${{
    $EDITOR ~/.zshrc
    lf -remote "send $id source ~/.config/lf/lfrc"
}}



cmd edit-i3 ${{
    $EDITOR ~/.i3/config
    lf -remote "send $id source ~/.config/lf/lfrc"
}}


cmd edit-lfrc ${{
    $EDITOR ~/.config/lf/lfrc
    lf -remote "send $id source ~/.config/lf/lfrc"
}}

cmd edit-sxiv ${{
    $EDITOR ~/.config/sxiv/exec/key-handler
    lf -remote "send $id source ~/.config/sxiv/exec/key-handler"
}}
map lf edit-lfrc
map li edit-i3
map lz edit-zshrc
map lv edit-nvim
map ls :fzf_search
map lx edit-sxiv

cmd toggle_preview %{{
    if [ "$lf_preview" = "true" ]; then
        lf -remote "send $id :set preview false; set ratios 1:5"
    else
        lf -remote "send $id :set preview true; set ratios 1:2:3"
    fi
}}

map zp toggle_preview
